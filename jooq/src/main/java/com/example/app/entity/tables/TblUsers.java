/*
 * This file is generated by jOOQ.
 */
package com.example.app.entity.tables;


import com.example.app.entity.Keys;
import com.example.app.entity.User;
import com.example.app.entity.tables.records.TblUsersRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblUsers extends TableImpl<TblUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user.tbl_users</code>
     */
    public static final TblUsers TBL_USERS = new TblUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TblUsersRecord> getRecordType() {
        return TblUsersRecord.class;
    }

    /**
     * The column <code>user.tbl_users.id</code>.
     */
    public final TableField<TblUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>user.tbl_users.email</code>.
     */
    public final TableField<TblUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>user.tbl_users.first_name</code>.
     */
    public final TableField<TblUsersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>user.tbl_users.last_name</code>.
     */
    public final TableField<TblUsersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    private TblUsers(Name alias, Table<TblUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TblUsers(Name alias, Table<TblUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.tbl_users</code> table reference
     */
    public TblUsers(String alias) {
        this(DSL.name(alias), TBL_USERS);
    }

    /**
     * Create an aliased <code>user.tbl_users</code> table reference
     */
    public TblUsers(Name alias) {
        this(alias, TBL_USERS);
    }

    /**
     * Create a <code>user.tbl_users</code> table reference
     */
    public TblUsers() {
        this(DSL.name("tbl_users"), null);
    }

    public <O extends Record> TblUsers(Table<O> child, ForeignKey<O, TblUsersRecord> key) {
        super(child, key, TBL_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : User.USER;
    }

    @Override
    public Identity<TblUsersRecord, Integer> getIdentity() {
        return (Identity<TblUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TblUsersRecord> getPrimaryKey() {
        return Keys.KEY_TBL_USERS_PRIMARY;
    }

    @Override
    public TblUsers as(String alias) {
        return new TblUsers(DSL.name(alias), this);
    }

    @Override
    public TblUsers as(Name alias) {
        return new TblUsers(alias, this);
    }

    @Override
    public TblUsers as(Table<?> alias) {
        return new TblUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TblUsers rename(String name) {
        return new TblUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TblUsers rename(Name name) {
        return new TblUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TblUsers rename(Table<?> name) {
        return new TblUsers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
